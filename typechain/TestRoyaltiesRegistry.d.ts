/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestRoyaltiesRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getRoyalties(address,uint256)": FunctionFragment;
    "royaltiesByToken(address)": FunctionFragment;
    "royaltiesByTokenAndTokenId(bytes32)": FunctionFragment;
    "setRoyaltiesByToken(address,(address,uint96)[])": FunctionFragment;
    "setRoyaltiesByTokenAndTokenId(address,uint256,(address,uint96)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesByTokenAndTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesByToken",
    values: [string, { account: string; value: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesByTokenAndTokenId",
    values: [string, BigNumberish, { account: string; value: BigNumberish }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesByTokenAndTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesByTokenAndTokenId",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestRoyaltiesRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestRoyaltiesRegistryInterface;

  functions: {
    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    setRoyaltiesByToken(
      token: string,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesByTokenAndTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRoyalties(
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  royaltiesByToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  royaltiesByTokenAndTokenId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setRoyaltiesByToken(
    token: string,
    royalties: { account: string; value: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesByTokenAndTokenId(
    token: string,
    tokenId: BigNumberish,
    royalties: { account: string; value: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    royaltiesByToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRoyaltiesByToken(
      token: string,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesByTokenAndTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRoyaltiesByToken(
      token: string,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesByTokenAndTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesByTokenAndTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRoyaltiesByToken(
      token: string,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesByTokenAndTokenId(
      token: string,
      tokenId: BigNumberish,
      royalties: { account: string; value: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
