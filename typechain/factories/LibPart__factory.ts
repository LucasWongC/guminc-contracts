/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibPart, LibPartInterface } from "../LibPart";

const _abi = [
  {
    inputs: [],
    name: "TYPE_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60aa610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806364d4c819146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b7f397e04204c1e1a60ee8724b71f8244e10ab5f2e9009854d80f602bda21b59ebb8156fea26469706673582212209a683f8cf6e0e07c82a81304ab11ab885730d8c8f07d6abc0b7c5dfe8f961d9964736f6c63430007060033";

export class LibPart__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibPart> {
    return super.deploy(overrides || {}) as Promise<LibPart>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibPart {
    return super.attach(address) as LibPart;
  }
  connect(signer: Signer): LibPart__factory {
    return super.connect(signer) as LibPart__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibPartInterface {
    return new utils.Interface(_abi) as LibPartInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibPart {
    return new Contract(address, _abi, signerOrProvider) as LibPart;
  }
}
