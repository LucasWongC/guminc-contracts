/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAssetMatcher,
  TestAssetMatcherInterface,
} from "../TestAssetMatcher";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "leftAssetType",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "rightAssetType",
        type: "tuple",
      },
    ],
    name: "matchAssets",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610359806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e366004610230565b610059565b6040516100509190610291565b60405180910390f35b610061610125565b82516001600160e01b03191663b6e25cd360e01b14156100fb57600083602001518060200190518101906100959190610202565b9050600083602001518060200190518101906100b19190610202565b9050806001600160a01b0316826001600160a01b031614156100f85750506040805180820190915282516001600160e01b031916815260208084015190820152905061011f565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b60408051808201909152600081526060602082015290565b60006040828403121561014e578081fd5b6040516040810167ffffffffffffffff828210818311171561016c57fe5b816040528293508435915063ffffffff60e01b8216821461018c57600080fd5b90825260209084820135818111156101a357600080fd5b8501601f810187136101b457600080fd5b8035828111156101c057fe5b6101d2601f8201601f191685016102ff565b925080835287848284010111156101e857600080fd5b808483018585013760009083018401525091015292915050565b600060208284031215610213578081fd5b81516001600160a01b0381168114610229578182fd5b9392505050565b60008060408385031215610242578081fd5b823567ffffffffffffffff80821115610259578283fd5b6102658683870161013d565b9350602085013591508082111561027a578283fd5b506102878582860161013d565b9150509250929050565b6000602080835263ffffffff60e01b84511681840152808401516040808501528051806060860152835b818110156102d7578281018401518682016080015283016102bb565b818111156102e85784608083880101525b50601f01601f191693909301608001949350505050565b60405181810167ffffffffffffffff8111828210171561031b57fe5b60405291905056fea26469706673582212209687c26a9f992ff9fd419871e28d28656a72b67a94438fe7e52ad7d877adb77f64736f6c63430007060033";

export class TestAssetMatcher__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAssetMatcher> {
    return super.deploy(overrides || {}) as Promise<TestAssetMatcher>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAssetMatcher {
    return super.attach(address) as TestAssetMatcher;
  }
  connect(signer: Signer): TestAssetMatcher__factory {
    return super.connect(signer) as TestAssetMatcher__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAssetMatcherInterface {
    return new utils.Interface(_abi) as TestAssetMatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAssetMatcher {
    return new Contract(address, _abi, signerOrProvider) as TestAssetMatcher;
  }
}
