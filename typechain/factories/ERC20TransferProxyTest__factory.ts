/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20TransferProxyTest,
  ERC20TransferProxyTestInterface,
} from "../ERC20TransferProxyTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "erc20safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063776062c314610030575b600080fd5b61006c6004803603608081101561004657600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561006e565b005b836001600160a01b03166323b872dd8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156100d657600080fd5b505af11580156100ea573d6000803e3d6000fd5b505050506040513d602081101561010057600080fd5b5051610153576040805162461bcd60e51b815260206004820152601a60248201527f6661696c757265207768696c65207472616e7366657272696e67000000000000604482015290519081900360640190fd5b5050505056fea2646970667358221220eb15faa60b9f69484061d5efc23ac3003048f95a2e1b3e7f9a5d5f9d06b1958a64736f6c63430007060033";

export class ERC20TransferProxyTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20TransferProxyTest> {
    return super.deploy(overrides || {}) as Promise<ERC20TransferProxyTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20TransferProxyTest {
    return super.attach(address) as ERC20TransferProxyTest;
  }
  connect(signer: Signer): ERC20TransferProxyTest__factory {
    return super.connect(signer) as ERC20TransferProxyTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TransferProxyTestInterface {
    return new utils.Interface(_abi) as ERC20TransferProxyTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20TransferProxyTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20TransferProxyTest;
  }
}
