/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AssetMatcherCollectionTest,
  AssetMatcherCollectionTestInterface,
} from "../AssetMatcherCollectionTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "__AssetMatcherCollection_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "__OperatorRole_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "addOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "leftAssetType",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "rightAssetType",
        type: "tuple",
      },
    ],
    name: "matchAssets",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "leftAssetType",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "rightAssetType",
        type: "tuple",
      },
    ],
    name: "matchAssetsTest",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "removeOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cd9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637638cca8116100665780637638cca8146100db5780638da5cb5b146100ee5780639870d7fe14610103578063ac8a584a14610116578063f2fde38b1461012957610093565b806324d92694146100985780632ff26a0a146100a25780636d3f7cb0146100aa578063715018a6146100d3575b600080fd5b6100a061013c565b005b6100a06101e6565b6100bd6100b8366004610aeb565b610283565b6040516100ca9190610b60565b60405180910390f35b6100a0610423565b6100bd6100e9366004610aeb565b6104cf565b6100f66104e8565b6040516100ca9190610b4c565b6100a0610111366004610a86565b6104f7565b6100a0610124366004610a86565b61057d565b6100a0610137366004610a86565b610600565b600054610100900460ff16806101555750610155610703565b80610163575060005460ff16155b61019e5760405162461bcd60e51b815260040180806020018281038252602e815260200180610c2e602e913960400191505060405180910390fd5b600054610100900460ff161580156101c9576000805460ff1961ff0019909116610100171660011790555b6101d16101e6565b80156101e3576000805461ff00191690555b50565b600054610100900460ff16806101ff57506101ff610703565b8061020d575060005460ff16155b6102485760405162461bcd60e51b815260040180806020018281038252602e815260200180610c2e602e913960400191505060405180910390fd5b600054610100900460ff16158015610273576000805460ff1961ff0019909116610100171660011790555b61027b610714565b6101d16107df565b61028b6109a9565b606560006102976108d8565b6001600160a01b0316815260208101919091526040016000205460ff166102ef5760405162461bcd60e51b8152600401808060200182810382526028815260200180610c7c6028913960400191505060405180910390fd5b81516001600160e01b0319166339d690a360e11b1480610320575081516001600160e01b03191663d8f960c160e01b145b8061033c575081516001600160e01b03191663025ceed960e61b145b80610357575081516001600160e01b03191662737ea960e61b145b80610373575081516001600160e01b031916630f9ae27560e21b145b156103f957600083602001518060200190518101906103929190610aa2565b9050600083602001518060200190518101906103ae9190610abe565b509050806001600160a01b0316826001600160a01b031614156103f65750506040805180820190915282516001600160e01b031916815260208084015190820152905061041d565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b61042b6108d8565b6001600160a01b031661043c6104e8565b6001600160a01b031614610485576040805162461bcd60e51b81526020600482018190526024820152600080516020610c5c833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6104d76109a9565b6104e18383610283565b9392505050565b6033546001600160a01b031690565b6104ff6108d8565b6001600160a01b03166105106104e8565b6001600160a01b031614610559576040805162461bcd60e51b81526020600482018190526024820152600080516020610c5c833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19166001179055565b6105856108d8565b6001600160a01b03166105966104e8565b6001600160a01b0316146105df576040805162461bcd60e51b81526020600482018190526024820152600080516020610c5c833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19169055565b6106086108d8565b6001600160a01b03166106196104e8565b6001600160a01b031614610662576040805162461bcd60e51b81526020600482018190526024820152600080516020610c5c833981519152604482015290519081900360640190fd5b6001600160a01b0381166106a75760405162461bcd60e51b8152600401808060200182810382526026815260200180610c086026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600061070e306108dc565b15905090565b600054610100900460ff168061072d575061072d610703565b8061073b575060005460ff16155b6107765760405162461bcd60e51b815260040180806020018281038252602e815260200180610c2e602e913960400191505060405180910390fd5b600054610100900460ff161580156107a1576000805460ff1961ff0019909116610100171660011790555b6101d16040518060400160405280601d81526020017f49276d20696e20636f6e7465787420696e697420756e636861696e65640000008152506108e2565b600054610100900460ff16806107f857506107f8610703565b80610806575060005460ff16155b6108415760405162461bcd60e51b815260040180806020018281038252602e815260200180610c2e602e913960400191505060405180910390fd5b600054610100900460ff1615801561086c576000805460ff1961ff0019909116610100171660011790555b60006108766108d8565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156101e3576000805461ff001916905550565b3390565b3b151590565b6101e3816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561092657818101518382015260200161090e565b50505050905090810190601f1680156109535780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790529250610988915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60408051808201909152600081526060602082015290565b6000604082840312156109d2578081fd5b6040516040810167ffffffffffffffff82821081831117156109f057fe5b816040528293508435915063ffffffff60e01b82168214610a1057600080fd5b9082526020908482013581811115610a2757600080fd5b8501601f81018713610a3857600080fd5b803582811115610a4457fe5b610a56601f8201601f19168501610bce565b92508083528784828401011115610a6c57600080fd5b808483018585013760009083018401525091015292915050565b600060208284031215610a97578081fd5b81356104e181610bf2565b600060208284031215610ab3578081fd5b81516104e181610bf2565b60008060408385031215610ad0578081fd5b8251610adb81610bf2565b6020939093015192949293505050565b60008060408385031215610afd578182fd5b823567ffffffffffffffff80821115610b14578384fd5b610b20868387016109c1565b93506020850135915080821115610b35578283fd5b50610b42858286016109c1565b9150509250929050565b6001600160a01b0391909116815260200190565b6000602080835263ffffffff60e01b84511681840152808401516040808501528051806060860152835b81811015610ba657828101840151868201608001528301610b8a565b81811115610bb75784608083880101525b50601f01601f191693909301608001949350505050565b60405181810167ffffffffffffffff81118282101715610bea57fe5b604052919050565b6001600160a01b03811681146101e357600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f70657261746f72526f6c653a2063616c6c6572206973206e6f7420746865206f70657261746f72a264697066735822122019bdb4fa4e4c7bd62fc9a4635d6342d7fae75ea94824ab8b3a9433a5cfb9777264736f6c63430007060033";

export class AssetMatcherCollectionTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AssetMatcherCollectionTest> {
    return super.deploy(overrides || {}) as Promise<AssetMatcherCollectionTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AssetMatcherCollectionTest {
    return super.attach(address) as AssetMatcherCollectionTest;
  }
  connect(signer: Signer): AssetMatcherCollectionTest__factory {
    return super.connect(signer) as AssetMatcherCollectionTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetMatcherCollectionTestInterface {
    return new utils.Interface(_abi) as AssetMatcherCollectionTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetMatcherCollectionTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetMatcherCollectionTest;
  }
}
