/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AssetMatcherTest,
  AssetMatcherTestInterface,
} from "../AssetMatcherTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "assetType",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "matcher",
        type: "address",
      },
    ],
    name: "MatcherChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "__AssetMatcherTest_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "leftAssetType",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "rightAssetType",
        type: "tuple",
      },
    ],
    name: "matchAssetsTest",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "assetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibAsset.AssetType",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "assetType",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "matcher",
        type: "address",
      },
    ],
    name: "setAssetMatcher",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ca3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80635d87c45614610067578063715018a6146100715780637638cca8146100795780638da5cb5b146100a2578063b39deb46146100b7578063f2fde38b146100ca575b600080fd5b61006f6100dd565b005b61006f610187565b61008c6100873660046108e4565b610245565b6040516100999190610aa6565b60405180910390f35b6100aa610270565b6040516100999190610a5b565b61006f6100c53660046108b0565b61027f565b61006f6100d8366004610896565b610361565b600054610100900460ff16806100f657506100f6610476565b80610104575060005460ff16155b61013f5760405162461bcd60e51b815260040180806020018281038252602e815260200180610c40602e913960400191505060405180910390fd5b600054610100900460ff1615801561016a576000805460ff1961ff0019909116610100171660011790555b610172610487565b8015610184576000805461ff00191690555b50565b61018f610580565b6001600160a01b03166101a0610270565b6001600160a01b0316146101fb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b61024d610850565b61026761025984610b2d565b61026284610b2d565b610584565b90505b92915050565b6033546001600160a01b031690565b610287610580565b6001600160a01b0316610298610270565b6001600160a01b0316146102f3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160e01b031982166000818152606560205260409081902080546001600160a01b0319166001600160a01b038516179055517fd2bf91075f105d0fd80328da28e20ebdad1c1261839711183bc29a44cbe6c72f90610355908490610a5b565b60405180910390a25050565b610369610580565b6001600160a01b031661037a610270565b6001600160a01b0316146103d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661041a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610c1a6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610481306105c4565b15905090565b600054610100900460ff16806104a057506104a0610476565b806104ae575060005460ff16155b6104e95760405162461bcd60e51b815260040180806020018281038252602e815260200180610c40602e913960400191505060405180910390fd5b600054610100900460ff16158015610514576000805460ff1961ff0019909116610100171660011790555b600061051e610580565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610184576000805461ff001916905550565b3390565b61058c610850565b600061059884846105ce565b80519091506001600160e01b0319166105bd576105b583856105ce565b91505061026a565b905061026a565b803b15155b919050565b6105d6610850565b825182516001600160e01b031982166355575f5d60e11b1415610641576001600160e01b031981166355575f5d60e11b141561061657849250505061026a565b505060408051808201825260008082528251602081810190945290815291810191909152905061026a565b6001600160e01b031982166322ba176160e21b1415610686576001600160e01b031981166322ba176160e21b14156106165761067d85856107f3565b9250505061026a565b6001600160e01b031982166339d690a360e11b14156106c2576001600160e01b031981166339d690a360e11b14156106165761067d85856107f3565b6001600160e01b0319821663025ceed960e61b14156106fe576001600160e01b0319811663025ceed960e61b14156106165761067d85856107f3565b6001600160e01b031982166000908152606560205260409020546001600160a01b031680156107b3576040516306d3f7cb60e41b81526001600160a01b03821690636d3f7cb0906107559089908990600401610ab9565b60006040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a99190810190610945565b935050505061026a565b6001600160e01b031983811690831614156107d2576107a986866107f3565b60405162461bcd60e51b81526004016107ea90610a6f565b60405180910390fd5b6107fb610850565b6020808401518051908201208382015180519201919091208082141561082557849250505061026a565b5050604080518082018252600080825282516020808201909452908152918101919091529392505050565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146105c957600080fd5b600060408284031215610890578081fd5b50919050565b6000602082840312156108a7578081fd5b61026782610868565b600080604083850312156108c2578081fd5b82356108cd81610c03565b91506108db60208401610868565b90509250929050565b600080604083850312156108f6578182fd5b823567ffffffffffffffff8082111561090d578384fd5b6109198683870161087f565b9350602085013591508082111561092e578283fd5b5061093b8582860161087f565b9150509250929050565b60006020808385031215610957578182fd5b825167ffffffffffffffff8082111561096e578384fd5b9084019060408287031215610981578384fd5b60405160408101818110838211171561099657fe5b60405282516109a481610c03565b815282840151828111156109b6578586fd5b80840193505086601f8401126109ca578485fd5b825191506109df6109da83610b0b565b610ae7565b82815287858486010111156109f2578586fd5b610a0183868301878701610bd3565b938101939093525090949350505050565b600063ffffffff60e01b82511683526020820151604060208501528051806040860152610a46816060870160208501610bd3565b601f01601f1916939093016060019392505050565b6001600160a01b0391909116815260200190565b60208082526017908201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604082015260600190565b6000602082526102676020830184610a12565b600060408252610acc6040830185610a12565b8281036020840152610ade8185610a12565b95945050505050565b60405181810167ffffffffffffffff81118282101715610b0357fe5b604052919050565b600067ffffffffffffffff821115610b1f57fe5b50601f01601f191660200190565b600060408236031215610b3e578081fd5b6040516040810167ffffffffffffffff8282108183111715610b5c57fe5b8160405284359150610b6d82610c03565b9082526020908482013581811115610b83578485fd5b8501905036601f820112610b95578384fd5b8035610ba36109da82610b0b565b8181523684838501011115610bb6578586fd5b818484018583013790810183019490945250810191909152919050565b60005b83811015610bee578181015183820152602001610bd6565b83811115610bfd576000848401525b50505050565b6001600160e01b03198116811461018457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212200910405d1d1498cd0d631c1627dde67866226d6ba7484859c36de1a1ee10e43264736f6c63430007060033";

export class AssetMatcherTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AssetMatcherTest> {
    return super.deploy(overrides || {}) as Promise<AssetMatcherTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AssetMatcherTest {
    return super.attach(address) as AssetMatcherTest;
  }
  connect(signer: Signer): AssetMatcherTest__factory {
    return super.connect(signer) as AssetMatcherTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetMatcherTestInterface {
    return new utils.Interface(_abi) as AssetMatcherTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetMatcherTest {
    return new Contract(address, _abi, signerOrProvider) as AssetMatcherTest;
  }
}
